@misc{texasU,
  author       = {Allison Boye},
  title        = {How Do I Create Meaningful and Effective Assignments?},
  howpublished = {\url{https://www.depts.ttu.edu/tlpdc/Resources/Teaching_resources/TLPDC_teaching_resources/CreatingEffectiveAssignments.php}},
  year         = {2020},
  note         = {[Online; consultado el 19 de julio del 2021 a las 23:00hrs]}
}

@article{10.5555/1968521.1968545,
  author     = {Torrey, Lisa},
  title      = {Student Interest and Choice in Programming Assignments},
  year       = {2011},
  issue_date = {June 2011},
  publisher  = {Consortium for Computing Sciences in Colleges},
  address    = {Evansville, IN, USA},
  volume     = {26},
  number     = {6},
  issn       = {1937-4771},
  abstract   = {This paper describes a study, conducted in an introductory programming course, on the factors that make students interested in programming assignments. These factors include whether the assignment is perceived as easy or difficult, and the paper analyzes these in detail. There are also significant factors involving the end product of the assignment. The study also looks at the impact of these interest factors on choice, when students must actually choose a program to write. The same factors are involved, but some become more important while others become correspondingly less important. These observations may be useful for instructors considering the design of assignments or the role of student choice in introductory programming courses.},
  journal    = {J. Comput. Sci. Coll.},
  month      = {jun},
  pages      = {110–116},
  numpages   = {7}
}

@inproceedings{10.1145/3456565.3461439,
  author    = {Siegel, Angela A. and Zarb, Mark and Alshaigy, Bedour and Blanchard, Jeremiah and Crick, Tom and Glassey, Richard and Hott, John R. and Latulipe, Celine and Riedesel, Charles and Senapathi, Mali and Simon and Williams, David},
  title     = {Educational Landscapes During and After COVID-19},
  year      = {2021},
  isbn      = {9781450383974},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3456565.3461439},
  doi       = {10.1145/3456565.3461439},
  abstract  = {The coronavirus (COVID-19) pandemic has forced an unprecedented global shift within higher education in the ways that we communicate with and educate students. This necessary paradigm shift has compelled educators to take a critical look at their teaching styles and use of technology. Computing education traditionally focuses on experiential, in-person activities. The pandemic has mandated that educators reconsider their use of student time and has catalysed overnight innovations in the educational setting.Even in the unlikely event that we return entirely to pre-COVID-19 norms, many new practices have emerged that offer valuable lessons to be carried forward into our post-COVID-19 teaching. This working group will explore what the post-COVID-19 academic landscape might look like, and how we can use lessons learned during this educational shift to improve our subsequent practice. The exploration will strive to identify practices within computing that appear to have been improved through exposure to online tools and technologies, and that should therefore continue to be used in the online space. In the broadest sense, our motivation is to explore what the post-COVID-19 educational landscape will look like for computing education.},
  booktitle = {Proceedings of the 26th ACM Conference on Innovation and Technology in Computer Science Education V. 2},
  pages     = {597-598},
  numpages  = {2},
  keywords  = {online education, computing education, coronavirus, COVID-19},
  location  = {Virtual Event, Germany},
  series    = {ITiCSE '21}
}

@phdthesis{huffman2023julia,
  title  = {Julia in WebAssembly},
  author = {Huffman, Raymond Minor},
  year   = {2023},
  school = {Massachusetts Institute of Technology}
}

@misc{privkweihmann_multimetric,
  author       = {Konrad Weihmann},
  title        = {multimetric},
  year         = {2021},
  howpublished = {\url{https://github.com/priv-kweihmann/multimetric}},
  note         = {Accedido el 1 de mayo del 2023}
}

@misc{privkweihmann_multimetricprog,
  author       = {Konrad Weihmann, Gonzalo Fernández},
  title        = {multimetricprog},
  year         = {2023},
  howpublished = {\url{https://pypi.org/project/multimetricprog/}},
  note         = {Accedido el 1 de mayo del 2023}
}

@inbook{Gackenheimer2015,
  author    = {Gackenheimer, Cory},
  title     = {What Is React?},
  booktitle = {Introduction to React},
  year      = {2015},
  publisher = {Apress},
  address   = {Berkeley, CA},
  pages     = {1--20},
  abstract  = {You may have picked up this book with some level of JavaScript knowledge. There is also a high probability that you have an idea of what React is. This chapter highlights the key aspects of React as a framework, explains the problems it solves, and describes how you can utilize the features and the rest of the information contained in this book to better your web development practices and create complex, yet maintainable user interfaces using React.},
  isbn      = {978-1-4842-1245-5},
  doi       = {10.1007/978-1-4842-1245-5_1},
  url       = {https://doi.org/10.1007/978-1-4842-1245-5_1}
}

@article{Utomo_2020,
  doi       = {10.1088/1757-899X/879/1/012077},
  url       = {https://dx.doi.org/10.1088/1757-899X/879/1/012077},
  year      = {2020},
  month     = {jul},
  publisher = {IOP Publishing},
  volume    = {879},
  number    = {1},
  pages     = {012077},
  author    = {Prayudi Utomo and  Falahah},
  title     = {Building Serverless Website on GitHub Pages},
  journal   = {IOP Conference Series: Materials Science and Engineering}
}

@article{10.1145/1227504.1227466,
  author     = {Layman, Lucas and Williams, Laurie and Slaten, Kelli},
  title      = {Note to Self: Make Assignments Meaningful},
  year       = {2007},
  issue_date = {March 2007},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {39},
  number     = {1},
  issn       = {0097-8418},
  url        = {https://doi-org.usm.idm.oclc.org/10.1145/1227504.1227466},
  doi        = {10.1145/1227504.1227466},
  journal    = {SIGCSE Bull.},
  month      = {3},
  pages      = {459–463},
  numpages   = {5},
  keywords   = {CS1, programming assignments, software engineering education}
}

@inproceedings{10.1145/1839594.1839609,
  author    = {Kinnunen, Paivi and Simon, Beth},
  title     = {Experiencing Programming Assignments in CS1: The Emotional Toll},
  year      = {2010},
  isbn      = {9781450302579},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi-org.usm.idm.oclc.org/10.1145/1839594.1839609},
  doi       = {10.1145/1839594.1839609},
  booktitle = {Proceedings of the Sixth International Workshop on Computing Education Research},
  pages     = {77–86},
  numpages  = {10},
  keywords  = {emotion, novice programmers, retention, cs1},
  location  = {Aarhus, Denmark},
  series    = {ICER 10}
}

@book{NAP12636,
  author    = {National Academy of Engineering},
  title     = {Developing Metrics for Assessing Engineering Instruction: What Gets Measured Is What Gets Improved},
  isbn      = {978-0-309-13782-9},
  doi       = {10.17226/12636},
  abstract  = {Faculty in all disciplines must continually prioritize their time to reflect the many demands of their faculty obligations, but they must also prioritize their efforts in ways that will improve the prospects of career advancement. The current perception is that research contributions are the most important measure with respect to faculty promotion and tenure decisions, and that teaching effectiveness is less valued--regardless of the stated weighting of research, teaching and service. In addition, methods for assessing research accomplishments are well established, even though imperfect, whereas metrics for assessing teaching, learning, and instructional effectiveness are not as well defined or well established.\n\nDeveloping Metrics for Assessing Engineering Instruction provides a concise description of a process to develop and institute a valid and acceptable means of measuring teaching effectiveness in order to foster greater acceptance and rewards for faculty efforts to improve their performance of the teaching role that makes up a part of their faculty responsibility. Although the focus of this book is in the area of engineering, the concepts and approaches are applicable to all fields in higher education.},
  url       = {https://www.nap.edu/catalog/12636/developing-metrics-for-assessing-engineering-instruction-what-gets-measured-is},
  year      = 2009,
  publisher = {The National Academies Press},
  address   = {Washington, DC}
}

@inproceedings{10.1145/2526968.2526982,
  author    = {Vivian, Rebecca and Falkner, Katrina and Falkner, Nickolas},
  title     = {Computer Science Students' Causal Attributions for Successful and Unsuccessful Outcomes in Programming Assignments},
  year      = {2013},
  isbn      = {9781450324823},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/2526968.2526982},
  doi       = {10.1145/2526968.2526982},
  abstract  = {While some students excel in introductory programming courses, others find the course to be significantly challenging and demanding. The way that students reason about the factors that contribute to success or failure may affect their self-efficacy, motivation, future success and whether or not they persist in Computer Science (CS). What factors do students' perceive to cause successful or unsuccessful learning outcomes in first-year programming assignments? Such findings can assist us in identifying causal reasoning that may be detrimental to future success and persistence. We use Attribution Theory (AT) as a framework to explore the "causal attributions" that students apply to explain their causes for success or failure in introductory programming assignments, alluded to in their reflective essays about performance in a course. Our research demonstrates that reflective essays, integrated into learning tasks, can be one effective and efficient way to extract students' casual attributions. Our results indicate that the students raised a number of causal attributions in their essays that were specific to the CS-context and were attributed to both internal and external causes. We highlight problematic areas of casual reasoning and a need to correct misleading reasoning to ensure CS students understand their control over the success of their future programming assignments. This research offers opportunities for future research to develop activities that may encourage students to correctly identify causes of performance outcomes in programming assignments and to determine if such interventions can prevent students from leaving CS.},
  booktitle = {Proceedings of the 13th Koli Calling International Conference on Computing Education Research},
  pages     = {125-134},
  numpages  = {10},
  keywords  = {university students, self-reflection, attributes, programming assignments, computer science education and self-assessment, failure, success, attribution theory},
  location  = {Koli, Finland},
  series    = {Koli Calling '13}
}

@book{book,
  title     = {Teaching For Quality Learning At University},
  author    = {Biggs, J. and Tang, C.},
  isbn      = {9780335242757},
  lccn      = {2002074964},
  series    = {SRHE and Open University Press Imprint},
  url       = {https://books.google.cl/books?id=XhjRBrDAESkC},
  year      = {2011},
  publisher = {McGraw-Hill Education}
}

@inproceedings{10.1145/3013499.3013507,
  author    = {Simon},
  title     = {Designing Programming Assignments to Reduce the Likelihood of Cheating},
  year      = {2017},
  isbn      = {9781450348232},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3013499.3013507},
  doi       = {10.1145/3013499.3013507},
  abstract  = {Understanding that there will always be some students who would rather cheat on their assessments than complete them with integrity, a number of authors have proposed rules of thumb for writing assignments that will reduce the incidence of cheating. Unfortunately, these rules are so general as to be of little help when it comes to actually designing an assignment, and then varying it from one course offering to the next. This paper uses a case study, a programming assignment in cryptography, to propose specific guidelines that can be applied to the design of programming assignments to reduce the chance that students will be able to copy from students in prior offerings of the course, and to reduce the chance that students will be able to copy from programs found on the web. The guidelines illustrated by the case study are to begin with something basic, to add hidden complexity, to add manifest complexity, to add levels of complexity, to vary the assignment substantially in each successive offering, and to have multiple test plans.},
  booktitle = {Proceedings of the Nineteenth Australasian Computing Education Conference},
  pages     = {42-47},
  numpages  = {6},
  keywords  = {cryptography, Programming assignments, academic integrity, cheating, computing education},
  location  = {Geelong, VIC, Australia},
  series    = {ACE '17}
}

@article{10.1145/1140123.1140167,
  author     = {Stevenson, Daniel E. and Wagner, Paul J.},
  title      = {Developing Real-World Programming Assignments for CS1},
  year       = {2006},
  issue_date = {September 2006},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {38},
  number     = {3},
  issn       = {0097-8418},
  url        = {https://doi.org/10.1145/1140123.1140167},
  doi        = {10.1145/1140123.1140167},
  abstract   = {Instructors have struggled to generate good programming assignments for the CS1 course. In attempting to deal with this issue ourselves, we have generated two real-world programming assignments that can be solved by most students yet generate challenges for advanced students. We present our overall criteria for a quality programming assignment in CS1, details of the two example assignments, and other issues stemming from the generation and management of these assignments.},
  journal    = {SIGCSE Bull.},
  month      = {jun},
  pages      = {158-162},
  numpages   = {5},
  keywords   = {programming assignments, CS1}
}

@inproceedings{10.1145/1140124.1140167,
  author    = {Stevenson, Daniel E. and Wagner, Paul J.},
  title     = {Developing Real-World Programming Assignments for CS1},
  year      = {2006},
  isbn      = {1595930558},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/1140124.1140167},
  doi       = {10.1145/1140124.1140167},
  abstract  = {Instructors have struggled to generate good programming assignments for the CS1 course. In attempting to deal with this issue ourselves, we have generated two real-world programming assignments that can be solved by most students yet generate challenges for advanced students. We present our overall criteria for a quality programming assignment in CS1, details of the two example assignments, and other issues stemming from the generation and management of these assignments.},
  booktitle = {Proceedings of the 11th Annual SIGCSE Conference on Innovation and Technology in Computer Science Education},
  pages     = {158-162},
  numpages  = {5},
  keywords  = {programming assignments, CS1},
  location  = {Bologna, Italy},
  series    = {ITICSE '06}
}

@inproceedings{10.1145/2676723.2677276,
  author    = {Hundhausen, Christopher D. and Carter, Adam S. and Adesope, Olusola},
  title     = {Supporting Programming Assignments with Activity Streams: An Empirical Study},
  year      = {2015},
  isbn      = {9781450329668},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/2676723.2677276},
  doi       = {10.1145/2676723.2677276},
  abstract  = {Social learning theory emphasizes the importance of providing learners with opportunities to observe their peers, and to participate actively in a community. Unfortunately, early computing courses tend to emphasize individual programming assignments, which discourage learners from observing and working with their peers. In order to explore the possibility that increased opportunities for social awareness and interaction while working on programming assignments might influence learning outcomes in early computing courses, we are studying the design and use of social networking-style activity streams in such courses. In an empirical study of the use of two types of activity streams in a CS 2 course - one that was part of a learning management system, and one integrated directly into students' programming environment - we found that students who used the integrated stream were twice as socially active; however, social participation in both environments was positively correlated with students' grades. Our results suggest that the use of activity streams as an adjunct to individual programming assignments can positively influence learning; computing instructors would do well to find ways to get their students to participate actively in activity streams during the programming process.},
  booktitle = {Proceedings of the 46th ACM Technical Symposium on Computer Science Education},
  pages     = {320-325},
  numpages  = {6},
  keywords  = {activity streams, cs 2, social learning theory, social networking, programming assignments},
  location  = {Kansas City, Missouri, USA},
  series    = {SIGCSE '15}
}

@inproceedings{10.1145/3414080.3414100,
  author    = {Yernaux, Gonzague and Vanhoof, Wim and Schumacher, Laurent},
  title     = {Moulinog: A Generator of Random Student Assignments Written in Prolog},
  year      = {2020},
  isbn      = {9781450388214},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3414080.3414100},
  doi       = {10.1145/3414080.3414100},
  abstract  = { We introduce, describe and discuss the potentialities of Moulinog, a tool created during the COVID-19 lockdown, designed to generate individual questionnaires for the remote evaluation of large classrooms. Starting with a list of students and a series of predicates constituting a pool of parametric questions along with rules for their parametrization, Mouling generates a list of individual questionnaires, together with a shell script allowing an easy emailing of the (password-protected) questionnaires to the students. The tool’s use in practice is illustrated on a particular course case for which it has proven to be both useful and time-saving.},
  booktitle = {Proceedings of the 22nd International Symposium on Principles and Practice of Declarative Programming},
  articleno = {15},
  numpages  = {5},
  keywords  = {Assignment generation, Prolog, Remote education, Pedagogic tool},
  location  = {Bologna, Italy},
  series    = {PPDP '20}
}

@article{10.1145/3477429,
  author     = {Craig, Michelle and Morrison, Briana B.},
  title      = {EngageCSEdu<br><br>Assignments: To Re-Use or Not Re-Use? That is the Question.},
  year       = {2021},
  issue_date = {September 2021},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {12},
  number     = {3},
  issn       = {2153-2184},
  url        = {https://doi.org/10.1145/3477429},
  doi        = {10.1145/3477429},
  journal    = {ACM Inroads},
  month      = {aug},
  pages      = {18-20},
  numpages   = {3}
}
@article{https://doi.org/10.1111/j.1749-6632.1967.tb55012.x,
  author  = {Stroud, John M.},
  title   = {THE FINE STRUCTURE OF PSYCHOLOGICAL TIME},
  journal = {Annals of the New York Academy of Sciences},
  volume  = {138},
  number  = {2},
  pages   = {623-631},
  doi     = {https://doi.org/10.1111/j.1749-6632.1967.tb55012.x},
  url     = {https://nyaspubs.onlinelibrary.wiley.com/doi/abs/10.1111/j.1749-6632.1967.tb55012.x},
  eprint  = {https://nyaspubs.onlinelibrary.wiley.com/doi/pdf/10.1111/j.1749-6632.1967.tb55012.x},
  year    = {1967}
}


@article{7725232,
  author    = {C. Ebert and J. Cain and G. Antoniol and S. Counsell and P. Laplante},
  journal   = {IEEE Software},
  title     = {Cyclomatic Complexity},
  year      = {2016},
  volume    = {33},
  number    = {06},
  issn      = {1937-4194},
  pages     = {27-29},
  doi       = {10.1109/MS.2016.147},
  publisher = {IEEE Computer Society},
  address   = {Los Alamitos, CA, USA},
  month     = {nov}
}

@inproceedings{10.5555/800254.807762,
  author    = {Hamer, Peter G. and Frewin, Gillian D.},
  title     = {M.H. Halstead's Software Science - a Critical Examination},
  year      = {1982},
  publisher = {IEEE Computer Society Press},
  address   = {Washington, DC, USA},
  abstract  = {Karl Popper has described the scientific method as “the method of bold conjectures and ingenious and severe attempts to refute them”. Software Science has made “bold conjectures” in postulating specific relationships between various 'metrics' of software code and in ascribing psychological interpretations to some of these metrics.This paper describes tests made on the validity of the relationships and interpretations which form the foundations of Software Science. The results indicate that the majority of them represent neither natural laws nor useful engineering approximations.},
  booktitle = {Proceedings of the 6th International Conference on Software Engineering},
  numpages  = {10},
  location  = {Tokyo, Japan},
  series    = {ICSE '82}
}



@book{10.5555/540137,
  author    = {Halstead, Maurice H.},
  title     = {Elements of Software Science (Operating and Programming Systems Series)},
  year      = {1977},
  isbn      = {0444002057},
  publisher = {Elsevier Science Inc.},
  address   = {USA}
}

@article{1702275,
  author  = {Li, H.F. and Cheung, W.K.},
  journal = {IEEE Transactions on Software Engineering},
  title   = {An Empirical Study of Software Metrics},
  year    = {1987},
  volume  = {SE-13},
  number  = {6},
  pages   = {697-708},
  doi     = {10.1109/TSE.1987.233475}
}

@article{10.7717/peerj-cs.647,
  author  = {Omer U, Farooq MS, Abid A},
  title   = {Introductory programming course: review and future implications},
  year    = {2021},
  journal = {PeerJ Computer Science 7:e647},
  url     = {https://doi.org/10.7717/peerj-cs.647},
  doi     = {10.7717/peerj-cs.647}
}


@article{WebAssemblyCoreSpecification2,
  author       = {W3C},
  editor       = {Rossberg, Andreas},
  title        = {WebAssembly Core Specification},
  year         = {2022},
  journal      = {https://www.w3.org/TR/wasm-core-2/},
  howpublished = {\url{https://www.w3.org/TR/wasm-core-2/}},
  url          = {https://www.w3.org/TR/wasm-core-2/}
}

@online{PythonWebsite,
  title        = {Python 3 Documentation},
  author       = {{Python Software Foundation}},
  year         = {Última actualización en la página},
  url          = {https://docs.python.org/3/},
  howpublished = {\url{https://docs.python.org/3/}}
}

@online{DFMarkdown,
  author       = {Gruber, John},
  title        = {Markdown},
  organization = {Daring Fireball},
  year         = {Última actualización en 2021},
  howpublished = {\url{https://daringfireball.net/projects/markdown/}},
  url          = {https://daringfireball.net/projects/markdown/},
  note         = {Accedido el 1 de mayo de 2023}
}

@online{MDNJavaScript,
  author       = {{Mozilla Contributors}},
  title        = {JavaScript},
  organization = {Mozilla Developer Network},
  year         = {Última actualización en 2021},
  url          = {https://developer.mozilla.org/en-US/docs/Web/JavaScript},
  howpublished = {\url{https://developer.mozilla.org/en-US/docs/Web/JavaScript}},
  note         = {Accedido el 1 de mayo de 2023}
}

@article{10.4135/9781071878781,
  author  = {Krippendorff, Klaus},
  title   = {Content Analysis: An Introduction to Its Methodology},
  year    = {2019},
  journal = {SAGE Publications, Inc.},
  url     = {https://methods.sagepub.com/book/content-analysis-4e},
  doi     = {10.4135/9781071878781}
}

@article{alpha-reliability-krippendorff,
  title    = {Computing Krippendorff's Alpha-Reliability.},
  url      = {https://repository.upenn.edu/asc_papers/43 },
  language = {en},
  author   = {Krippendorff Klaus},
  year     = {2011}
}

@inproceedings{la2012aprendizaje,
  title     = {Aprendizaje combinado, aprendizaje electrónico centrado en el alumno y nuevas tecnologías},
  author    = {La Red Martínez, David L and Acosta, Julio César and Mata, Liliana E and Bachmann, Noemí G and Vallejos, Oscar},
  booktitle = {VII Congreso de Tecnología en Educación y Educación en Tecnología},
  year      = {2012}
}

@book{10.5555/326112,
  author    = {Fayad, Mohamed E. and Schmidt, Douglas C. and Johnson, Ralph E.},
  title     = {Building Application Frameworks: Object-Oriented Foundations of Framework Design},
  year      = {1999},
  isbn      = {0471248754},
  publisher = {John Wiley \& Sons, Inc.},
  address   = {USA}
}

@misc{ProblemDomain,
  author  = {Ward Cunningham},
  title   = {Problem Domain},
  year    = 2014,
  url     = {https://wiki.c2.com/?ProblemDomain},
  urldate = {2021-12-11}
}

@article{elearn,
  author  = {Derntl, Michael and Calvo, Rafael},
  year    = {2011},
  month   = {05},
  pages   = {284-296},
  title   = {E-learning frameworks: Facilitating the implementation of educational design patterns},
  volume  = {3},
  journal = {International Journal of Technology Enhanced Learning},
  doi     = {10.1504/IJTEL.2011.040225}
}

@inproceedings{Mangler04cewebs,
  author    = {Juergen Mangler and Michael Derntl},
  title     = {CEWebS - Cooperative Environment Web Services},
  booktitle = {Proc. 4th International Conference on Knowledge Management (I-KNOW'04},
  year      = {2004}
}

@inproceedings{cs1,
  author    = {Hertz, Matthew},
  title     = {What Do "CS1" and "CS2" Mean? Investigating Differences in the Early Courses},
  year      = {2010},
  isbn      = {9781450300063},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/1734263.1734335},
  doi       = {10.1145/1734263.1734335},
  abstract  = {Thirty-one years ago, the ACM Computing Curricula used the terms "CS1" and "CS2" to designate the first two two courses in the introductory sequence of a computer science major. While computer science education has greatly changed since that time, we still refer to introduction to programming courses as CS1 and basic data structures courses as CS2. This common shorthand is then used to enable students to transfer between institutions and as a base of many research studies.In this paper we show that while there is wide agreement on the connotation of CS1 and CS2, there is little agreement as to the denotation of these terms. Surveying CS1 and CS2 instructors, we find little agreement on how important various topics are to each of these course and less agreement on how well students master the material. Even after limiting the analysis to whether a topic has ANY important or students complete a course with ANY mastery of the material, we continue to find significant disagreements between instructors.},
  booktitle = {Proceedings of the 41st ACM Technical Symposium on Computer Science Education},
  pages     = {199–203},
  numpages  = {5},
  keywords  = {cs2, curriculum design, cs1, survey},
  location  = {Milwaukee, Wisconsin, USA},
  series    = {SIGCSE '10}
}

@inproceedings{cs0,
  author    = {Lionelle, Albert and Grinslad, Josette and Beveridge, J. Ross},
  title     = {CS 0: Culture and Coding},
  year      = {2020},
  isbn      = {9781450367936},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi-org.usm.idm.oclc.org/10.1145/3328778.3366795},
  doi       = {10.1145/3328778.3366795},
  booktitle = {Proceedings of the 51st ACM Technical Symposium on Computer Science Education},
  pages     = {227-233},
  numpages  = {7},
  keywords  = {course design, cs0, spaced-based recall, computing education},
  location  = {Portland, OR, USA},
  series    = {SIGCSE '20}
}

@inproceedings{10.1145/2591708.2591749,
  author    = {Watson, Christopher and Li, Frederick W.B.},
  title     = {Failure Rates in Introductory Programming Revisited},
  year      = {2014},
  isbn      = {9781450328333},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/2591708.2591749},
  doi       = {10.1145/2591708.2591749},
  booktitle = {Proceedings of the 2014 Conference on Innovation \& Technology in Computer Science Education},
  pages     = {39-44},
  numpages  = {6},
  keywords  = {programming, failure rates, cs1, introductory programming, statistics, pass rates, fail rates},
  location  = {Uppsala, Sweden},
  series    = {ITiCSE '14}
}

