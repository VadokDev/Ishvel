@misc{texasU,
  author = {Allison Boye},
  title = {{How Do I Create Meaningful and Effective Assignments?}},
  howpublished = "\url{https://www.depts.ttu.edu/tlpdc/Resources/Teaching_resources/TLPDC_teaching_resources/CreatingEffectiveAssignments.php}",
  year = {2020}, 
  note = "[Online; consultado el 19 de julio del 2021 a las 23:00hrs]"
}

@article{10.5555/1968521.1968545,
author = {Torrey, Lisa},
title = {Student Interest and Choice in Programming Assignments},
year = {2011},
issue_date = {June 2011},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {26},
number = {6},
issn = {1937-4771},
abstract = {This paper describes a study, conducted in an introductory programming course, on the factors that make students interested in programming assignments. These factors include whether the assignment is perceived as easy or difficult, and the paper analyzes these in detail. There are also significant factors involving the end product of the assignment. The study also looks at the impact of these interest factors on choice, when students must actually choose a program to write. The same factors are involved, but some become more important while others become correspondingly less important. These observations may be useful for instructors considering the design of assignments or the role of student choice in introductory programming courses.},
journal = {J. Comput. Sci. Coll.},
month = {jun},
pages = {110–116},
numpages = {7}
}

@article{10.1145/1227504.1227466,
author = {Layman, Lucas and Williams, Laurie and Slaten, Kelli},
title = {Note to Self: Make Assignments Meaningful},
year = {2007},
issue_date = {March 2007},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {39},
number = {1},
issn = {0097-8418},
url = {https://doi-org.usm.idm.oclc.org/10.1145/1227504.1227466},
doi = {10.1145/1227504.1227466},
journal = {SIGCSE Bull.},
month = {3},
pages = {459–463},
numpages = {5},
keywords = {CS1, programming assignments, software engineering education}
}

@inproceedings{10.1145/1839594.1839609,
author = {Kinnunen, Paivi and Simon, Beth},
title = {Experiencing Programming Assignments in CS1: The Emotional Toll},
year = {2010},
isbn = {9781450302579},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi-org.usm.idm.oclc.org/10.1145/1839594.1839609},
doi = {10.1145/1839594.1839609},
booktitle = {Proceedings of the Sixth International Workshop on Computing Education Research},
pages = {77–86},
numpages = {10},
keywords = {emotion, novice programmers, retention, cs1},
location = {Aarhus, Denmark},
series = {ICER 10}
}

@BOOK{NAP12636,
  author    = "National Academy of Engineering",
  title     = "Developing Metrics for Assessing Engineering Instruction: What Gets Measured Is What Gets Improved",
  isbn      = "978-0-309-13782-9",
  doi       = "10.17226/12636",
  abstract  = "Faculty in all disciplines must continually prioritize their time to reflect the many demands of their faculty obligations, but they must also prioritize their efforts in ways that will improve the prospects of career advancement. The current perception is that research contributions are the most important measure with respect to faculty promotion and tenure decisions, and that teaching effectiveness is less valued--regardless of the stated weighting of research, teaching and service. In addition, methods for assessing research accomplishments are well established, even though imperfect, whereas metrics for assessing teaching, learning, and instructional effectiveness are not as well defined or well established.\n\nDeveloping Metrics for Assessing Engineering Instruction provides a concise description of a process to develop and institute a valid and acceptable means of measuring teaching effectiveness in order to foster greater acceptance and rewards for faculty efforts to improve their performance of the teaching role that makes up a part of their faculty responsibility. Although the focus of this book is in the area of engineering, the concepts and approaches are applicable to all fields in higher education.",
  url       = "https://www.nap.edu/catalog/12636/developing-metrics-for-assessing-engineering-instruction-what-gets-measured-is",
  year      = 2009,
  publisher = "The National Academies Press",
  address   = "Washington, DC"
}

@inproceedings{10.1145/2526968.2526982,
author = {Vivian, Rebecca and Falkner, Katrina and Falkner, Nickolas},
title = {Computer Science Students' Causal Attributions for Successful and Unsuccessful Outcomes in Programming Assignments},
year = {2013},
isbn = {9781450324823},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2526968.2526982},
doi = {10.1145/2526968.2526982},
abstract = {While some students excel in introductory programming courses, others find the course to be significantly challenging and demanding. The way that students reason about the factors that contribute to success or failure may affect their self-efficacy, motivation, future success and whether or not they persist in Computer Science (CS). What factors do students' perceive to cause successful or unsuccessful learning outcomes in first-year programming assignments? Such findings can assist us in identifying causal reasoning that may be detrimental to future success and persistence. We use Attribution Theory (AT) as a framework to explore the "causal attributions" that students apply to explain their causes for success or failure in introductory programming assignments, alluded to in their reflective essays about performance in a course. Our research demonstrates that reflective essays, integrated into learning tasks, can be one effective and efficient way to extract students' casual attributions. Our results indicate that the students raised a number of causal attributions in their essays that were specific to the CS-context and were attributed to both internal and external causes. We highlight problematic areas of casual reasoning and a need to correct misleading reasoning to ensure CS students understand their control over the success of their future programming assignments. This research offers opportunities for future research to develop activities that may encourage students to correctly identify causes of performance outcomes in programming assignments and to determine if such interventions can prevent students from leaving CS.},
booktitle = {Proceedings of the 13th Koli Calling International Conference on Computing Education Research},
pages = {125–134},
numpages = {10},
keywords = {university students, self-reflection, attributes, programming assignments, computer science education and self-assessment, failure, success, attribution theory},
location = {Koli, Finland},
series = {Koli Calling '13}
}

@book{book,
author = {Biggs, John},
year = {2003},
month = {01},
pages = {},
title = {Teaching for Quality Learning at University}
}

@inproceedings{10.1145/3013499.3013507,
author = {Simon},
title = {Designing Programming Assignments to Reduce the Likelihood of Cheating},
year = {2017},
isbn = {9781450348232},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3013499.3013507},
doi = {10.1145/3013499.3013507},
abstract = {Understanding that there will always be some students who would rather cheat on their assessments than complete them with integrity, a number of authors have proposed rules of thumb for writing assignments that will reduce the incidence of cheating. Unfortunately, these rules are so general as to be of little help when it comes to actually designing an assignment, and then varying it from one course offering to the next. This paper uses a case study, a programming assignment in cryptography, to propose specific guidelines that can be applied to the design of programming assignments to reduce the chance that students will be able to copy from students in prior offerings of the course, and to reduce the chance that students will be able to copy from programs found on the web. The guidelines illustrated by the case study are to begin with something basic, to add hidden complexity, to add manifest complexity, to add levels of complexity, to vary the assignment substantially in each successive offering, and to have multiple test plans.},
booktitle = {Proceedings of the Nineteenth Australasian Computing Education Conference},
pages = {42–47},
numpages = {6},
keywords = {cryptography, Programming assignments, academic integrity, cheating, computing education},
location = {Geelong, VIC, Australia},
series = {ACE '17}
}

@article{10.1145/1140123.1140167,
author = {Stevenson, Daniel E. and Wagner, Paul J.},
title = {Developing Real-World Programming Assignments for CS1},
year = {2006},
issue_date = {September 2006},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {38},
number = {3},
issn = {0097-8418},
url = {https://doi.org/10.1145/1140123.1140167},
doi = {10.1145/1140123.1140167},
abstract = {Instructors have struggled to generate good programming assignments for the CS1 course. In attempting to deal with this issue ourselves, we have generated two real-world programming assignments that can be solved by most students yet generate challenges for advanced students. We present our overall criteria for a quality programming assignment in CS1, details of the two example assignments, and other issues stemming from the generation and management of these assignments.},
journal = {SIGCSE Bull.},
month = {jun},
pages = {158–162},
numpages = {5},
keywords = {programming assignments, CS1}
}

@inproceedings{10.1145/1140124.1140167,
author = {Stevenson, Daniel E. and Wagner, Paul J.},
title = {Developing Real-World Programming Assignments for CS1},
year = {2006},
isbn = {1595930558},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1140124.1140167},
doi = {10.1145/1140124.1140167},
abstract = {Instructors have struggled to generate good programming assignments for the CS1 course. In attempting to deal with this issue ourselves, we have generated two real-world programming assignments that can be solved by most students yet generate challenges for advanced students. We present our overall criteria for a quality programming assignment in CS1, details of the two example assignments, and other issues stemming from the generation and management of these assignments.},
booktitle = {Proceedings of the 11th Annual SIGCSE Conference on Innovation and Technology in Computer Science Education},
pages = {158–162},
numpages = {5},
keywords = {programming assignments, CS1},
location = {Bologna, Italy},
series = {ITICSE '06}
}

@inproceedings{10.1145/2676723.2677276,
author = {Hundhausen, Christopher D. and Carter, Adam S. and Adesope, Olusola},
title = {Supporting Programming Assignments with Activity Streams: An Empirical Study},
year = {2015},
isbn = {9781450329668},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2676723.2677276},
doi = {10.1145/2676723.2677276},
abstract = {Social learning theory emphasizes the importance of providing learners with opportunities to observe their peers, and to participate actively in a community. Unfortunately, early computing courses tend to emphasize individual programming assignments, which discourage learners from observing and working with their peers. In order to explore the possibility that increased opportunities for social awareness and interaction while working on programming assignments might influence learning outcomes in early computing courses, we are studying the design and use of social networking-style activity streams in such courses. In an empirical study of the use of two types of activity streams in a CS 2 course - one that was part of a learning management system, and one integrated directly into students' programming environment - we found that students who used the integrated stream were twice as socially active; however, social participation in both environments was positively correlated with students' grades. Our results suggest that the use of activity streams as an adjunct to individual programming assignments can positively influence learning; computing instructors would do well to find ways to get their students to participate actively in activity streams during the programming process.},
booktitle = {Proceedings of the 46th ACM Technical Symposium on Computer Science Education},
pages = {320–325},
numpages = {6},
keywords = {activity streams, cs 2, social learning theory, social networking, programming assignments},
location = {Kansas City, Missouri, USA},
series = {SIGCSE '15}
}

@inproceedings{10.1145/3414080.3414100,
author = {Yernaux, Gonzague and Vanhoof, Wim and Schumacher, Laurent},
title = {Moulinog: A Generator of Random Student Assignments Written in Prolog},
year = {2020},
isbn = {9781450388214},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3414080.3414100},
doi = {10.1145/3414080.3414100},
abstract = { We introduce, describe and discuss the potentialities of Moulinog, a tool created during the COVID-19 lockdown, designed to generate individual questionnaires for the remote evaluation of large classrooms. Starting with a list of students and a series of predicates constituting a pool of parametric questions along with rules for their parametrization, Mouling generates a list of individual questionnaires, together with a shell script allowing an easy emailing of the (password-protected) questionnaires to the students. The tool’s use in practice is illustrated on a particular course case for which it has proven to be both useful and time-saving.},
booktitle = {Proceedings of the 22nd International Symposium on Principles and Practice of Declarative Programming},
articleno = {15},
numpages = {5},
keywords = {Assignment generation, Prolog, Remote education, Pedagogic tool},
location = {Bologna, Italy},
series = {PPDP '20}
}

@article{10.1145/3477429,
author = {Craig, Michelle and Morrison, Briana B.},
title = {EngageCSEdu<br><br>Assignments: To Re-Use or Not Re-Use? That is the Question.},
year = {2021},
issue_date = {September 2021},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {12},
number = {3},
issn = {2153-2184},
url = {https://doi.org/10.1145/3477429},
doi = {10.1145/3477429},
journal = {ACM Inroads},
month = {aug},
pages = {18–20},
numpages = {3}
}







